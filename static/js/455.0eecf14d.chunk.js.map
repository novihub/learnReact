{"version":3,"file":"static/js/455.0eecf14d.chunk.js","mappings":"qKAIA,MAMA,EANuCA,IAErCC,EAAAA,EAAAA,KAAA,OAAAC,SAAK,aCHP,GAAeC,EAAAA,EAAAA,GAAiBC,E,4ECMhC,MAAMC,EAA8BC,IAAmB,CACrDC,OAAQD,EAAME,KAAKD,SAId,SAASJ,EAAqDM,GAInE,MAAMC,UAA0BC,EAAAA,UAC9BC,MAAAA,GACE,OAAKC,KAAKb,MAAMO,QAETN,EAAAA,EAAAA,KAACQ,EAAS,IAAKI,KAAKb,SAFIC,EAAAA,EAAAA,KAACa,EAAAA,GAAQ,CAACC,GAAG,UAG9C,EAKF,OAFkBC,EAAAA,EAAAA,IAAQX,EAEnBY,CAAUP,EACnB,C","sources":["components/Settings/Settings.tsx","components/Settings/SettingsContainer.tsx","components/hoc/withAuthRedirect.tsx"],"sourcesContent":["import React from 'react'\n\ninterface MusicProps {}\n\nconst Settings: React.FC<MusicProps> = props => {\n\treturn (\n\t\t<div>Settings</div>\n\t)\n}\n\nexport default Settings","import { withAuthRedirect } from '../hoc/withAuthRedirect'\nimport Settings from './Settings'\n\nexport default withAuthRedirect(Settings)\n","import React from 'react'\nimport { connect, ConnectedProps } from 'react-redux'\nimport { Navigate } from 'react-router-dom'\nimport { AppStateType } from '../../redux/redux-store'\n\ntype MapStateToPropsType = {\n  isAuth: boolean\n}\n\nconst mapStateToPropsForRedirect = (state: AppStateType): MapStateToPropsType => ({\n  isAuth: state.auth.isAuth,\n})\n\n// Constrain T to include React.JSX.IntrinsicAttributes\nexport function withAuthRedirect<T extends React.ComponentType<any>>(Component: T) {\n  // Define type for props from redux\n  type PropsFromRedux = ConnectedProps<typeof connector>\n\n  class RedirectComponent extends React.Component<PropsFromRedux> {\n    render() {\n      if (!this.props.isAuth) return <Navigate to='/login' />\n      \n      return <Component {...this.props as T extends React.ComponentType<infer P> ? P : never} />\n    }\n  }\n\n  const connector = connect(mapStateToPropsForRedirect)\n  \n  return connector(RedirectComponent)\n}\n"],"names":["props","_jsx","children","withAuthRedirect","Settings","mapStateToPropsForRedirect","state","isAuth","auth","Component","RedirectComponent","React","render","this","Navigate","to","connect","connector"],"sourceRoot":""}