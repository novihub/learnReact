{"version":3,"file":"static/js/151.09474e1b.chunk.js","mappings":"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","sources":["components/Dialogs/AddMessageForm/AddMessageForm.tsx","webpack://learnReact/./src/components/Dialogs/Dialog/Dialog.module.css?19be","components/Dialogs/Dialog/Dialog.tsx","webpack://learnReact/./src/components/Dialogs/Dialogs.module.css?1b2e","webpack://learnReact/./src/components/Dialogs/Message/Message.module.css?72d0","components/Dialogs/Message/Message.tsx","components/Dialogs/Dialogs.tsx","components/Dialogs/DialogsContainer.tsx","webpack://learnReact/./src/components/hoc/FormsControls/createFormsControls.module.css?7b4f","components/hoc/FormsControls/createFormsControls.tsx","components/hoc/withAuthRedirect.tsx","utils/validators/validators.ts"],"sourcesContent":["import { InjectedFormProps, reduxForm } from 'redux-form';\r\nimport { maxLength100, required } from '../../../utils/validators/validators';\r\nimport {\r\n    Textarea,\r\n    createField\r\n} from '../../hoc/FormsControls/createFormsControls';\r\nimport { NewMessageFormType } from '../Dialogs';\r\nimport React from 'react';\r\n\r\ntype NewMessageFormValuesKeysType = Extract<keyof NewMessageFormType, string>;\r\ntype PropsType = {};\r\n\r\nconst AddMessageForm: React.FC<\r\n    InjectedFormProps<NewMessageFormType, PropsType> & PropsType\r\n> = props => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            {createField<NewMessageFormValuesKeysType>(\r\n                'Enter your message',\r\n                'newMessageBody',\r\n                [required, maxLength100],\r\n                Textarea\r\n            )}\r\n            <button>Enter</button>\r\n        </form>\r\n    );\r\n};\r\n\r\nconst AddMessageFormRedux = reduxForm<NewMessageFormType>({\r\n    form: 'dialogAddMessageForm'\r\n})(AddMessageForm);\r\n\r\nexport default AddMessageFormRedux;\r\n","// extracted by mini-css-extract-plugin\nexport default {\"Dialog\":\"Dialog_Dialog__6EYw8\"};","import React from 'react'\r\nimport { NavLink } from 'react-router-dom'\r\nimport classes from './Dialog.module.css'\r\n\r\ninterface OwnPropsType {\r\n\tid: number\r\n\tname: string\r\n}\r\n\r\nconst Dialog: React.FC<OwnPropsType> = props => {\r\n\treturn (\r\n\t\t<div className={classes.Dialog}>\r\n\t\t\t<NavLink to={`${props.id}`}>{props.name + ' ' + props.id}</NavLink>\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\nexport default Dialog\r\n","// extracted by mini-css-extract-plugin\nexport default {\"DialogsPage\":\"Dialogs_DialogsPage__f9UMX\",\"Dialogs\":\"Dialogs_Dialogs__lQSmj\",\"Messages\":\"Dialogs_Messages__KQ7gW\",\"addMessage\":\"Dialogs_addMessage__9mzCv\"};","// extracted by mini-css-extract-plugin\nexport default {\"Message\":\"Message_Message__OGcd9\"};","import React from 'react';\r\nimport classes from './Message.module.css'\r\n\r\ninterface OwnPropsType {\r\n\tid: number\r\n\tmessage: string\r\n}\r\n\r\nconst Message: React.FC<OwnPropsType> = props => {\r\n\r\n\treturn (\r\n\t\t<div className={classes.Message}>\r\n\t\t\t{props.message + ' ' + props.id}\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\nexport default Message","import React from 'react'\r\nimport { initialStateType } from '../../redux/dialogs-reducer'\r\nimport AddMessageFormRedux from './AddMessageForm/AddMessageForm'\r\nimport Dialog from './Dialog/Dialog'\r\nimport classes from './Dialogs.module.css'\r\nimport Message from './Message/Message'\r\n\r\nexport type NewMessageFormType = {\r\n\tnewMessageBody: string\r\n}\r\n\r\ntype OwnPropsType = {\r\n\tdialogsPage: initialStateType\r\n\taddMessage: (messageText: string) => void\r\n}\r\n\r\nconst Dialogs: React.FC<OwnPropsType> = props => {\r\n\tconst getDialogs = props.dialogsPage.dialogs.map(d => (\r\n\t\t<Dialog key={d.id} name={d.name} id={d.id} />\r\n\t))\r\n\r\n\tconst getMessages = props.dialogsPage.messages.map(m => (\r\n\t\t<Message key={m.id} message={m.message} id={m.id} />\r\n\t))\r\n\r\n\tconst addNewMessage = (values: { newMessageBody: string }) => {\r\n\t\tprops.addMessage(values.newMessageBody)\r\n\t}\r\n\r\n\treturn (\r\n\t\t<div className={classes.DialogsPage}>\r\n\t\t\t<div className={classes.Dialogs}>{getDialogs}</div>\r\n\t\t\t<div className={classes.Messages}>\r\n\t\t\t\t<div>{getMessages}</div>\r\n\t\t\t\t<div className={classes.addMessage}>\r\n\t\t\t\t\t<AddMessageFormRedux onSubmit={addNewMessage} />\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\nexport default Dialogs\r\n","import { connect } from 'react-redux'\r\nimport { compose } from 'redux'\r\nimport { actions } from '../../redux/dialogs-reducer'\r\nimport { withAuthRedirect } from '../hoc/withAuthRedirect'\r\nimport Dialogs from './Dialogs'\r\nimport { AppStateType } from '../../redux/redux-store'\r\n\r\nconst mapStateToProps = (state: AppStateType) => {\r\n\treturn {\r\n\t\tdialogsPage: state.dialogsPage\r\n\t}\r\n}\r\n\r\n// const mapDispatchToProps = dispatch => {\r\n// \treturn {\r\n// \t\taddMessage: newMessageBody => {\r\n// \t\t\tdispatch(actions.addMessageAC(newMessageBody))\r\n// \t\t}\r\n// \t}\r\n// }\r\n\r\nexport default compose<React.ComponentType>(\r\n\tconnect(mapStateToProps, {...actions}),\r\n\twithAuthRedirect\r\n)(Dialogs)\r\n","// extracted by mini-css-extract-plugin\nexport default {\"Textarea\":\"createFormsControls_Textarea__Sf5XJ\",\"error\":\"createFormsControls_error__l1y6F\"};","import React from 'react'\r\nimport { Field } from 'redux-form'\r\nimport { FieldValidatorType } from '../../../utils/validators/validators'\r\nimport classes from './createFormsControls.module.css'\r\n\r\ntype ElementParamsType = {\r\n\tinput: any\r\n\tmeta: {\r\n\t\ttouched: boolean\r\n\t\terror: string\r\n\t}\r\n\tchildren?: React.ReactNode\r\n}\r\n\r\nconst Element =\r\n\t(Element: React.FC | string): React.FC<ElementParamsType> =>\r\n\t({ input, meta: { touched, error }, children, ...props }) => {\r\n\t\tconst hasError = touched && error\r\n\r\n\t\treturn (\r\n\t\t\t<div className={`${classes.Textarea} ${hasError ? classes.error : ''}`}>\r\n\t\t\t\t<Element {...input} {...props} />\r\n\t\t\t\t{hasError && <span>{error}</span>}\r\n\t\t\t</div>\r\n\t\t)\r\n\t}\r\n\r\nexport const Textarea = Element('textarea')\r\n\r\nexport const Input = Element('input')\r\n\r\nexport function createField<LoginFormValuesTypeKeys extends string>(\r\n\tplaceholder: string,\r\n\tname: LoginFormValuesTypeKeys,\r\n\tvalidators: Array<FieldValidatorType>,\r\n\tcomponent: string | React.FC<any>,\r\n\tprops = {},\r\n\ttext = ''\r\n) {\r\n\treturn (\r\n\t\t<div>\r\n\t\t\t<Field\r\n\t\t\t\tvalidate={validators}\r\n\t\t\t\tplaceholder={placeholder}\r\n\t\t\t\tname={name}\r\n\t\t\t\tcomponent={component}\r\n\t\t\t\t{...props}\r\n\t\t\t/>\r\n\t\t\t{text}\r\n\t\t</div>\r\n\t)\r\n}\r\n","import React from 'react'\r\nimport { connect, ConnectedProps } from 'react-redux'\r\nimport { Navigate } from 'react-router-dom'\r\nimport { AppStateType } from '../../redux/redux-store'\r\n\r\ntype MapStateToPropsType = {\r\n  isAuth: boolean\r\n}\r\n\r\nconst mapStateToPropsForRedirect = (state: AppStateType): MapStateToPropsType => ({\r\n  isAuth: state.auth.isAuth,\r\n})\r\n\r\n// Constrain T to include React.JSX.IntrinsicAttributes\r\nexport function withAuthRedirect<T extends React.ComponentType<any>>(Component: T) {\r\n  // Define type for props from redux\r\n  type PropsFromRedux = ConnectedProps<typeof connector>\r\n\r\n  class RedirectComponent extends React.Component<PropsFromRedux> {\r\n    render() {\r\n      if (!this.props.isAuth) return <Navigate to='/login' />\r\n      \r\n      return <Component {...this.props as T extends React.ComponentType<infer P> ? P : never} />\r\n    }\r\n  }\r\n\r\n  const connector = connect(mapStateToPropsForRedirect)\r\n  \r\n  return connector(RedirectComponent)\r\n}\r\n","export type FieldValidatorType = (value: string) => string | undefined\r\n\r\nexport const required: FieldValidatorType = (value) => {\r\n\tif (value) return undefined\r\n\r\n\treturn 'Field is required'\r\n}\r\n\r\nexport const maxLengthCreator = (maxLength: number): FieldValidatorType => (value) => {\r\n\tif (value && value.length > maxLength)\r\n\t\treturn `Max length is ${maxLength} symbols`\r\n\r\n\treturn undefined\r\n}\r\n\r\nexport const maxLength10 = maxLengthCreator(10)\r\nexport const maxLength100 = maxLengthCreator(100)\r\n"],"names":["reduxForm","form","props","_jsxs","onSubmit","handleSubmit","children","createField","required","maxLength100","Textarea","_jsx","className","classes","NavLink","to","concat","id","name","message","getDialogs","dialogsPage","dialogs","map","d","Dialog","getMessages","messages","m","Message","AddMessageFormRedux","values","addMessage","newMessageBody","compose","connect","state","actions","withAuthRedirect","Dialogs","Element","_ref","input","meta","touched","error","hasError","Input","placeholder","validators","component","arguments","length","undefined","text","Field","validate","mapStateToPropsForRedirect","isAuth","auth","Component","RedirectComponent","React","render","this","Navigate","connector","value","maxLengthCreator","maxLength"],"sourceRoot":""}