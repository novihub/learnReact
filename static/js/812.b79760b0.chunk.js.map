{"version":3,"file":"static/js/812.b79760b0.chunk.js","mappings":"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","sources":["components/Login/Login.tsx","webpack://learnReact/./src/components/hoc/FormsControls/createFormsControls.module.css?7b4f","components/hoc/FormsControls/createFormsControls.tsx","utils/validators/validators.ts","webpack://learnReact/./src/components/Login/Login.module.css?3530"],"sourcesContent":["import React from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { Navigate } from 'react-router-dom'\nimport { InjectedFormProps, reduxForm } from 'redux-form'\nimport { login } from '../../redux/auth-reducer'\nimport { AppStateType } from '../../redux/redux-store'\nimport { required } from '../../utils/validators/validators'\nimport { createField, Input } from '../hoc/FormsControls/createFormsControls'\nimport classes from './Login.module.css'\n\nexport type LoginFormValuesType = {\n\temail: string\n\tpassword: string\n\trememberMe: boolean\n\tcaptcha: string\n}\n\ntype MapStatePropsType = {}\ntype MapDispatchPropsType = {}\ntype LoginFormValuesTypeKeys = keyof LoginFormValuesType\ntype LoginFormOwnProps = {\n\tcaptchaUrl: string | null\n}\n\nconst LoginForm: React.FC<\n\tInjectedFormProps<LoginFormValuesType, LoginFormOwnProps> & LoginFormOwnProps\n> = ({ handleSubmit, error, captchaUrl }) => {\n\treturn (\n\t\t<form onSubmit={handleSubmit}>\n\t\t\t{/* <Field\n\t\t\t\t\tvalidate={[required]}\n\t\t\t\t\tplaceholder='email'\n\t\t\t\t\tname='email'\n\t\t\t\t\tcomponent={Input}\n\t\t\t\t/> */}\n\t\t\t{createField<LoginFormValuesTypeKeys>(\n\t\t\t\t'Email',\n\t\t\t\t'email',\n\t\t\t\t[required],\n\t\t\t\tInput\n\t\t\t)}\n\t\t\t{createField<LoginFormValuesTypeKeys>(\n\t\t\t\t'Password',\n\t\t\t\t'password',\n\t\t\t\t[required],\n\t\t\t\tInput,\n\t\t\t\t{\n\t\t\t\t\ttype: 'password'\n\t\t\t\t}\n\t\t\t)}\n\t\t\t{createField<LoginFormValuesTypeKeys>(\n\t\t\t\t'',\n\t\t\t\t'rememberMe',\n\t\t\t\t[],\n\t\t\t\tInput,\n\t\t\t\t{ type: 'checkbox' },\n\t\t\t\t'remember me'\n\t\t\t)}\n\t\t\t{captchaUrl && <img src={captchaUrl} alt='' />}\n\t\t\t{captchaUrl &&\n\t\t\t\tcreateField<LoginFormValuesTypeKeys>(\n\t\t\t\t\t'Symbols from image',\n\t\t\t\t\t'captcha',\n\t\t\t\t\t[required],\n\t\t\t\t\tInput,\n\t\t\t\t\t{}\n\t\t\t\t)}\n\t\t\t{/* <Field\n\t\t\t\tvalidate={[required]}\n\t\t\t\tplaceholder='Password'\n\t\t\t\tname='password'\n\t\t\t\ttype='password'\n\t\t\t\tcomponent={Input}\n\t\t\t/> */}\n\n\t\t\t{/* <Field type='checkbox' name='rememberMe' component={Input} /> */}\n\t\t\t{error && <div className={classes.FormSummaryError}>{error}</div>}\n\t\t\t<div>\n\t\t\t\t<button>Login</button>\n\t\t\t</div>\n\t\t</form>\n\t)\n}\n\nconst LoginReduxForm = reduxForm<LoginFormValuesType, LoginFormOwnProps>({\n\tform: 'login'\n})(LoginForm)\n\nconst Login: React.FC<MapStatePropsType & MapDispatchPropsType> = () => {\n\tconst captchaUrl = useSelector((state: AppStateType) => state.auth.captchaUrl)\n\tconst isAuth = useSelector((state: AppStateType) => state.auth.isAuth)\n\tconst userId = useSelector((state: AppStateType) => state.auth.userId)\n\n\tconst dispatch = useDispatch()\n\n\tconst onSubmit = (formData: LoginFormValuesType) => {\n\t\tconst { email, password, rememberMe, captcha } = formData\n\t\tdispatch(login(email, password, rememberMe, captcha))\n\t}\n\n\tif (isAuth) {\n\t\treturn <Navigate to={`/profile/${userId}`} />\n\t}\n\n\treturn (\n\t\t<div className={classes.Login}>\n\t\t\t<h1>Access denied! You need to login :(</h1>\n\t\t\t<LoginReduxForm onSubmit={onSubmit} captchaUrl={captchaUrl} />\n\t\t</div>\n\t)\n}\n// export default connect(\n// \t(state: any) => {\n// \t\treturn {\n// \t\t\tisAuth: state.auth.isAuth,\n// \t\t\tcaptchaUrl: state.auth.captchaUrl,\n// \t\t}\n// \t},\n// \t{\n// \t\tlogin\n// \t}\n// )(Login)\n\nexport default Login\n","// extracted by mini-css-extract-plugin\nexport default {\"Textarea\":\"createFormsControls_Textarea__IlAFW\",\"error\":\"createFormsControls_error__CVMTv\"};","import React from 'react'\nimport { Field } from 'redux-form'\nimport { FieldValidatorType } from '../../../utils/validators/validators'\nimport classes from './createFormsControls.module.css'\n\ntype ElementParamsType = {\n\tinput: any\n\tmeta: {\n\t\ttouched: boolean\n\t\terror: string\n\t}\n\tchildren?: React.ReactNode\n}\n\nconst Element =\n\t(Element: React.FC | string): React.FC<ElementParamsType> =>\n\t({ input, meta: { touched, error }, children, ...props }) => {\n\t\tconst hasError = touched && error\n\n\t\treturn (\n\t\t\t<div className={`${classes.Textarea} ${hasError ? classes.error : ''}`}>\n\t\t\t\t<Element {...input} {...props} />\n\t\t\t\t{hasError && <span>{error}</span>}\n\t\t\t</div>\n\t\t)\n\t}\n\nexport const Textarea = Element('textarea')\n\nexport const Input = Element('input')\n\nexport function createField<LoginFormValuesTypeKeys extends string>(\n\tplaceholder: string,\n\tname: LoginFormValuesTypeKeys,\n\tvalidators: Array<FieldValidatorType>,\n\tcomponent: string | React.FC<any>,\n\tprops = {},\n\ttext = ''\n) {\n\treturn (\n\t\t<div>\n\t\t\t<Field\n\t\t\t\tvalidate={validators}\n\t\t\t\tplaceholder={placeholder}\n\t\t\t\tname={name}\n\t\t\t\tcomponent={component}\n\t\t\t\t{...props}\n\t\t\t/>\n\t\t\t{text}\n\t\t</div>\n\t)\n}\n","export type FieldValidatorType = (value: string) => string | undefined\n\nexport const required: FieldValidatorType = (value) => {\n\tif (value) return undefined\n\n\treturn 'Field is required'\n}\n\nexport const maxLengthCreator = (maxLength: number): FieldValidatorType => (value) => {\n\tif (value && value.length > maxLength)\n\t\treturn `Max length is ${maxLength} symbols`\n\n\treturn undefined\n}\n\nexport const maxLength10 = maxLengthCreator(10)\nexport const maxLength100 = maxLengthCreator(100)\n","// extracted by mini-css-extract-plugin\nexport default {\"Login\":\"Login_Login__VdlKH\",\"FormSummaryError\":\"Login_FormSummaryError__JXw3A\"};"],"names":["LoginReduxForm","reduxForm","form","_ref","handleSubmit","error","captchaUrl","_jsxs","onSubmit","children","createField","required","Input","type","_jsx","src","alt","className","classes","FormSummaryError","Login","useSelector","state","auth","isAuth","userId","dispatch","useDispatch","Navigate","to","concat","formData","email","password","rememberMe","captcha","login","Element","input","meta","touched","props","hasError","Textarea","placeholder","name","validators","component","arguments","length","undefined","text","Field","validate","value","maxLengthCreator","maxLength","maxLength100"],"sourceRoot":""}